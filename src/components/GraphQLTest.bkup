
import { useState, useEffect } from 'react';
import { generateClient } from 'aws-amplify/api';
import { getCurrentUser, fetchAuthSession } from 'aws-amplify/auth';
import { Button, Card, CardContent, Typography, Box, Alert, Chip } from '@mui/material';
import type {
    GraphQLResponse,
    SchemaResponse,
    CreateUserProfileResponse,
    CreateUserProfileInput,
    ListUserProfilesResponse,
    AuthUser,
    AuthSession
} from '../types/graphql';

const client = generateClient();

export function GraphQLTest() {
    const [result, setResult] = useState<string>('');
    const [loading, setLoading] = useState<boolean>(false);
    const [authStatus, setAuthStatus] = useState<string>('Checking...');

    useEffect(() => {
        checkAuthStatus();
    }, []);

    const checkAuthStatus = async (): Promise<void> => {
        try {
            const user = await getCurrentUser() as AuthUser;
            const session = await fetchAuthSession() as AuthSession;

            setAuthStatus(`‚úÖ Authenticated as: ${user.username}`);
            console.log('Auth Status:', {
                user: user.username,
                hasTokens: !!session.tokens,
                tokenTypes: session.tokens ? Object.keys(session.tokens) : []
            });
        } catch (error) {
            setAuthStatus('‚ùå Not authenticated');
            console.log('Auth check failed:', error);
        }
    };

    const testAuth = async (): Promise<void> => {
        setLoading(true);
        try {
            const user = await getCurrentUser() as AuthUser;
            const session = await fetchAuthSession() as AuthSession;

            setResult(`‚úÖ Authentication Details:
Username: ${user.username}
User ID: ${user.userId}
Email: ${user.signInDetails?.loginId || 'N/A'}
Sign-in method: ${user.signInDetails?.authFlowType || 'N/A'}

Session Info:
- Tokens available: ${session.tokens ? 'Yes' : 'No'}
- Token types: ${session.tokens ? Object.keys(session.tokens).join(', ') : 'None'}
- Credentials: ${session.credentials ? 'Available' : 'Missing'}

This confirms your authentication is working properly! üéâ`);

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            setResult(`‚ùå Authentication Error: ${errorMessage}
      
This means you're not properly signed in.
Try signing out and signing back in.`);
        }
        setLoading(false);
    };

    const testSchema = async (): Promise<void> => {
        setLoading(true);
        try {
            console.log('üß™ Testing GraphQL schema...');

            const response = await client.graphql({
                query: `{ __schema { types { name } } }`
            }) as GraphQLResponse<SchemaResponse>;

            if (!response.data) {
                throw new Error('No data received from GraphQL');
            }

            const types = response.data.__schema.types.map((t) => t.name);
            const customTypes = types.filter((t) => !t.startsWith('__'));

            setResult(`‚úÖ GraphQL Schema Test Successful! üéâ

Available Custom Types:
${customTypes.map(type => `‚Ä¢ ${type}`).join('\n')}

Built-in Types Found: ${types.length - customTypes.length}
Custom Types Found: ${customTypes.length}

Key Models:
${customTypes.includes('UserProfile') ? '‚úÖ UserProfile - Ready for user management' : '‚ùå UserProfile - Missing'}
${customTypes.includes('Todo') ? '‚úÖ Todo - Ready for task management' : '‚ùå Todo - Missing'}

Your GraphQL API is working perfectly! üöÄ`);

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            let errorDetails = '';

            if (error && typeof error === 'object' && 'errors' in error) {
                errorDetails = JSON.stringify((error as { errors: unknown }).errors, null, 2);
            }

            setResult(`‚ùå GraphQL Schema Error: ${errorMessage}

Common causes:
1. Backend (sandbox) not running
2. Authentication token expired
3. Network connectivity issues
4. GraphQL endpoint misconfigured

Error details:
${errorDetails || 'No additional error details'}`);
        }
        setLoading(false);
    };

    const testUserProfile = async (): Promise<void> => {
        setLoading(true);
        try {
            const user = await getCurrentUser() as AuthUser;

            const input: CreateUserProfileInput = {
                email: user.signInDetails?.loginId || `${user.username}@example.com`,
                name: user.username || "Test User",
                role: "user",
                isActive: true
            };

            const response = await client.graphql({
                query: `
          mutation CreateUserProfile($input: CreateUserProfileInput!) {
            createUserProfile(input: $input) {
              id
              email
              name
              role
              isActive
              createdAt
              updatedAt
            }
          }
        `,
                variables: { input }
            }) as GraphQLResponse<CreateUserProfileResponse>;

            if (!response.data) {
                throw new Error('No data received from GraphQL');
            }

            setResult(`‚úÖ UserProfile Created Successfully! üéâ

Profile Details:
${JSON.stringify(response.data.createUserProfile, null, 2)}

This confirms:
‚Ä¢ GraphQL mutations work
‚Ä¢ Database writes are successful  
‚Ä¢ Authentication allows data creation
‚Ä¢ Your backend is fully functional! üöÄ`);

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';

            if (errorMessage.includes('duplicate') || errorMessage.includes('already exists')) {
                setResult(`‚ÑπÔ∏è UserProfile Already Exists

This is actually good news! It means:
‚úÖ GraphQL connection works
‚úÖ Authentication is valid
‚úÖ Database is accessible
‚úÖ Previous profile creation was successful

The error just means you already have a profile for this user.`);
            } else {
                let errorDetails = '';
                if (error && typeof error === 'object' && 'errors' in error) {
                    errorDetails = JSON.stringify((error as { errors: unknown }).errors, null, 2);
                }

                setResult(`‚ùå UserProfile Creation Error: ${errorMessage}

Error details:
${errorDetails || 'No additional error details'}`);
            }
        }
        setLoading(false);
    };

    const listUserProfiles = async (): Promise<void> => {
        setLoading(true);
        try {
            const response = await client.graphql({
                query: `
          query ListUserProfiles {
            listUserProfiles {
              items {
                id
                email
                name
                role
                isActive
                createdAt
              }
            }
          }
        `
            }) as GraphQLResponse<ListUserProfilesResponse>;

            if (!response.data) {
                throw new Error('No data received from GraphQL');
            }

            const profiles = response.data.listUserProfiles.items;
            setResult(`‚úÖ UserProfiles Retrieved Successfully! üéâ

Total Profiles: ${profiles.length}

Profile List:
${profiles.map((p, index) =>
                `${index + 1}. ${p.name} (${p.email})
   Role: ${p.role} | Active: ${p.isActive ? 'Yes' : 'No'}
   Created: ${new Date(p.createdAt).toLocaleString()}`
            ).join('\n\n')}

This confirms your GraphQL queries work perfectly! üöÄ`);

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            let errorDetails = '';

            if (error && typeof error === 'object' && 'errors' in error) {
                errorDetails = JSON.stringify((error as { errors: unknown }).errors, null, 2);
            }

            setResult(`‚ùå List UserProfiles Error: ${errorMessage}

Error details:
${errorDetails || 'No additional error details'}`);
        }
        setLoading(false);
    };

    return (
        <Card sx={{ maxWidth: 900, margin: 2 }}>
            <CardContent>
                <Typography variant="h5" gutterBottom>
                    üß™ Smart Pulver - Backend Test Panel
                </Typography>

                <Box sx={{ mb: 2 }}>
                    <Chip
                        label={authStatus}
                        color={authStatus.startsWith('‚úÖ') ? 'success' : 'error'}
                        sx={{ mr: 1 }}
                    />
                    <Chip
                        label="GraphQL Ready"
                        color="info"
                    />
                </Box>

                <Alert severity="info" sx={{ mb: 2 }}>
                    Test your authentication and GraphQL backend functionality.
                    Run tests in order: Auth ‚Üí Schema ‚Üí UserProfile operations.
                </Alert>

                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 3 }}>
                    <Button
                        variant="outlined"
                        onClick={testAuth}
                        disabled={loading}
                        size="large"
                    >
                        1Ô∏è‚É£ Test Authentication
                    </Button>

                    <Button
                        variant="contained"
                        onClick={testSchema}
                        disabled={loading}
                        size="large"
                    >
                        2Ô∏è‚É£ Test GraphQL Schema
                    </Button>

                    <Button
                        variant="contained"
                        color="secondary"
                        onClick={testUserProfile}
                        disabled={loading}
                        size="large"
                    >
                        3Ô∏è‚É£ Create UserProfile
                    </Button>

                    <Button
                        variant="contained"
                        color="success"
                        onClick={listUserProfiles}
                        disabled={loading}
                        size="large"
                    >
                        4Ô∏è‚É£ List UserProfiles
                    </Button>
                </Box>

                {loading && (
                    <Alert severity="info" sx={{ mb: 2 }}>
                        üîÑ Testing in progress... Please wait.
                    </Alert>
                )}

                {result && (
                    <Box
                        sx={{
                            backgroundColor: result.startsWith('‚úÖ') ? '#e8f5e8' :
                                result.startsWith('‚ÑπÔ∏è') ? '#e3f2fd' : '#ffeaea',
                            padding: 3,
                            borderRadius: 2,
                            fontFamily: 'monospace',
                            whiteSpace: 'pre-wrap',
                            fontSize: '0.9rem',
                            border: result.startsWith('‚úÖ') ? '2px solid #4caf50' :
                                result.startsWith('‚ÑπÔ∏è') ? '2px solid #2196f3' : '2px solid #f44336',
                            maxHeight: '400px',
                            overflow: 'auto'
                        }}
                    >
                        {result}
                    </Box>
                )}
            </CardContent>
        </Card>
    );
}